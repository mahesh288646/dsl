import data.*
println JOB_NAME
Properties props = new Properties()
File propsFile = new File('/var/lib/jenkins/workspace/SampleDSL3/data/environment.properties')
props.load(propsFile.newDataInputStream())
println props.getProperty('Env')
def AppName1 = props.getProperty('AppName')
def GitNam = props.getProperty('GitName')
def AppType = props.getProperty('AppType')
def GitName = "https://github.com/mahesh288646/$GitNam"
//def GitName = "https://github.com/mahesh288646/SimpleMaven1.git"
println props.getProperty('AppName')

if ('String $AppType==SpringBoot')
{
println("This is springboot space")
multibranchPipelineJob("$AppName1") {
    branchSources {
        git {
            id('12121213') // IMPORTANT: use a constant and unique identifier mahesh
            remote("$GitName")
            credentialsId('Git-ID')

        }
    }
 configure {
    def factory = it / factory(class: 'com.cloudbees.workflow.multibranch.CustomBranchProjectFactory')
    factory << definition(class:'org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition') {
      scm(class: 'hudson.plugins.git.GitSCM') {
        userRemoteConfigs {
          'hudson.plugins.git.UserRemoteConfig' {
            url ( 'https://github.com/mahesh288646/dsl.git')
          }
        }
        branches {
          'hudson.plugins.git.BranchSpec' {
            name('master')
          }
        }
      }
      scriptPath('zot.groovy')
    }
  }
	orphanedItemStrategy {
        discardOldItems {
            numToKeep(0)
        }
    }
}
} else
if ($AppType==Angular)
{
println("This is Angular space")
multibranchPipelineJob("$AppName1") {
    branchSources {
        git {
            id('12121213') // IMPORTANT: use a constant and unique identifier mahesh
            remote("$GitName")
            credentialsId('Git-ID')

        }
    }
    orphanedItemStrategy {
        discardOldItems {
            numToKeep(0)
        }
    }
}
}